#[MASTER]
#encoding = utf-8

[MAIN]
#Dies deaktiviert die Prüfung der Moduldokumentation und der Funktiondokumentation, aber alle anderen Prüfungen werden
#weiterhin ausgeführt
disable = missing-function-docstring, missing-module-docstring

#Analysieren von Import-Fallback-Blöcken. Dies kann verwendet werden, um sowohl Python-2- als auch
#Python-3-kompatiblen Code zu unterstützen, was bedeutet, dass der Block Code enthalten kann, der
#nur in einem oder einem anderen Interpreter vorhanden ist, was zu falsch positiven Ergebnissen bei
#der Analyse führen kann.
analyse-fallback-blocks = no

#Löschen von In-Memory-Caches nach Abschluss des Linting. Nützlich, wenn pylint im Server-Modus
#ausgeführt wird.
clear-cache-post-run = no

#Alle verfügbaren Erweiterungen laden und aktivieren. Verwenden Sie --list-extensions, um eine
#Liste aller verfügbaren Erweiterungen anzuzeigen.
#enable-all-extensions=

#Im Fehlermodus werden Nachrichten mit einer Kategorie außer ERROR oder FATAL unterdrückt, und
#standardmäßig werden keine Berichte erstellt. Der Fehlermodus ist mit der Deaktivierung
#bestimmter Fehler kompatibel.
#errors-only=

#Immer eine 0 (kein Fehler) Statuscode zurückgeben, auch wenn Lint-Fehler gefunden werden. Dies ist
# hauptsächlich in Continuous Integration-Skripten nützlich.
#exit-zero=

#Eine durch Komma getrennte Liste von Paket- oder Modulnamen, aus denen C-Erweiterungen geladen
#werden können. Erweiterungen werden in den aktiven Python-Interpreter geladen und können
#beliebigen Code ausführen.
extension-pkg-allow-list=

#Eine durch Komma getrennte Liste von Paket- oder Modulnamen, aus denen C-Erweiterungen geladen
#werden können. Erweiterungen werden in den aktiven Python-Interpreter geladen und können
#beliebigen Code ausführen. (Dies ist ein alternativer Name für extension-pkg-allow-list zur
#Abwärtskompatibilität.)
extension-pkg-whitelist=

#Gib einen Nicht-Null-Exit-Code zurück, wenn eine dieser Nachrichten/Kategorien erkannt wird, auch
#wenn der Wert über --fail-under liegt. Syntax wie enable. Angegebene Nachrichten sind aktiviert,
#während Kategorien bereits aktivierten Nachrichten überprüfen.
fail-on=

#Legen Sie einen Schwellenwert fest, unter dem das Programm bei einem Fehler beendet wird.
fail-under = 10

#Interpretieren Sie stdin als Python-Skript, dessen Dateiname als Argument "module_or_package"
#übergeben werden muss.
#from-stdin=

#Zu ignorierende Dateien oder Verzeichnisse. Sie sollten Basenamen sein, keine Pfade.
ignore = CVS

#Fügen Sie reguläre Ausdrucksmuster hinzu, die Dateien oder Verzeichnisse ignorieren sollen. Der
#reguläre Ausdruck passt auf Pfade und kann im Posix- oder Windows-Format vorliegen. Da '\' das
#Verzeichnistrennzeichen auf Windows-Systemen darstellt, kann es nicht als Escape-Zeichen verwendet
# werden.
ignore-paths=

#Dateien oder Verzeichnisse, die den regulären Ausdrucksmustern entsprechen, werden ignoriert. Der
#reguläre Ausdruck passt auf Basenamen, nicht auf Pfade. Der Standardwert ignoriert
#Emacs-Dateisperren.
ignore-patterns=^.#

#Liste von Modulnamen, für die Member-Attribute nicht überprüft werden sollten (n
##Anfang
# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis). It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs=1

# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results=100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# Minimum Python version to use for version dependent checks. Will default to
# the version used to run pylint.
py-version=3.11

# Discover python modules and packages in the file system subtree.
recursive=no

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# In verbose mode, extra non-checker-related info will be displayed.
#verbose=


[BASIC]

# Naming style matching correct argument names.
argument-naming-style=snake_case

# Regular expression matching correct argument names. Overrides argument-
# naming-style. If left empty, argument names will be checked with the set
# naming style.
#argument-rgx=

# Naming style matching correct attribute names.
attr-naming-style=snake_case

# Regular expression matching correct attribute names. Overrides attr-naming-
# style. If left empty, attribute names will be checked with the set naming
# style.
#attr-rgx=

# Bad variable names which should always be refused, separated by a comma.
bad-names=foo,
          bar,
          baz,
          toto,
          tutu,
          tata

# Bad variable names regexes, separated by a comma. If names match any regex,
# they will always be refused
bad-names-rgxs=

# Naming style matching correct class attribute names.
class-attribute-naming-style=any

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style. If left empty, class attribute names will be checked
# with the set naming style.
#class-attribute-rgx=

# Naming style matching correct class constant names.
class-const-naming-style=UPPER_CASE

# Regular expression matching correct class constant names. Overrides class-
# const-naming-style. If left empty, class constant names will be checked with
# the set naming style.
#class-const-rgx=

# Naming style matching correct class names.
class-naming-style=PascalCase

# Regular expression matching correct class names. Overrides class-naming-
# style. If left empty, class names will be checked with the set naming style.
#class-rgx=

# Naming style matching correct constant names.
const-naming-style=UPPER_CASE

# Regular expression matching correct constant names. Overrides const-naming-
# style. If left empty, constant names will be checked with the set naming
# style.
#const-rgx=

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names.
function-naming-style=snake_case

# Regular expression matching correct function names. Overrides function-
# naming-style. If left empty, function names will be checked with the set
# naming style.
#function-rgx=

# Good variable names which should always be accepted, separated by a comma.
good-names=i,
           j,
           k,
           ex,
           Run,
           _

# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
good-names-rgxs=

# Include a hint for the correct naming format with invalid-name.
include-naming-hint=no

# Naming style matching correct inline iteration names.
inlinevar-naming-style=any

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style. If left empty, inline iteration names will be checked
# with the set naming style.
#inlinevar-rgx=

# Naming style matching correct method names.
method-naming-style=snake_case

# Regular expression matching correct method names. Overrides method-naming-
# style. If left empty, method names will be checked with the set naming style.
#method-rgx=

# Naming style matching correct module names.
module-naming-style=snake_case

# Regular expression matching correct module names. Overrides module-naming-
# style. If left empty, module names will be checked with the set naming style.
#module-rgx=

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes=abc.abstractproperty

# Regular expression matching correct type variable names. If left empty, type
# variable names will be checked with the set naming style.
#typevar-rgx=

# Naming style matching correct variable names.
variable-naming-style=snake_case

# Regular expression matching correct variable names. Overrides variable-
# naming-style. If left empty, variable names will be checked with the set
# naming style.
#variable-rgx=


[CLASSES]

# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods=no

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,
                      __new__,
                      setUp,
                      __post_init__

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[DESIGN]

# List of regular expressions of class ancestor names to ignore when counting
# public methods (see R0903)
exclude-too-few-public-methods=

# List of qualified class names to ignore when counting class parents (see
# R0901)
ignored-parents=

# Maximum number of arguments for function / method.
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr=5

# Maximum number of branch for function / method body.
max-branches=12

# Maximum number of locals for function / method body.
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7



##Ende
#Maximale Anzahl öffentlicher Methoden für eine Klasse (siehe R0904).
max-public-methods=20

#Maximale Anzahl von Rückgaben / Yield für den Funktions- / Methodenkörper.
max-returns=6

#Maximale Anzahl von Anweisungen im Funktions- / Methodenkörper.
max-statements=50

#Minimale Anzahl öffentlicher Methoden für eine Klasse (siehe R0903).
min-public-methods=2

[AUSNAHMEN]

#Ausnahmen, die eine Warnung auslösen, wenn sie gefangen werden.
overgeneral-exceptions=builtins.BaseException,builtins.Exception

[FORMATIERUNG]

#Erwartetes Format des Zeilenendes, z.B. leer (beliebiges Zeilenende), LF oder CRLF.
expected-line-ending-format=

#Regulärer Ausdruck für eine Zeile, die länger als die Grenze sein darf.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

#Anzahl der erforderlichen Leerzeichen für die Einrückung innerhalb einer hängenden oder
#fortgesetzten Zeile.
indent-after-paren=4

#Zeichenfolge, die als Einheit für die Einrückung verwendet wird. Dies ist normalerweise " " (4
#Leerzeichen) oder "\t" (1 Tabulator).
indent-string='    '

#Maximale Anzahl von Zeichen in einer einzelnen Zeile.
max-line-length=120

#Maximale Anzahl von Zeilen in einem Modul.
max-module-lines=1000

#Erlaube den Körper einer Klasse auf derselben Zeile wie die Deklaration zu stehen, wenn der Körper
#nur eine Anweisung enthält.
single-line-class-stmt=no

#Erlaube den Körper eines If auf derselben Zeile wie der Test zu stehen, wenn es kein Else gibt.
single-line-if-stmt=no

[IMPORTS]

#Liste der Module, die auf jeder Ebene importiert werden können, nicht nur auf der obersten Ebene.
allow-any-import-level=

#Erlaube explizite Reexports durch Alias aus einem Paket init.
allow-reexport-from-package=no

#Erlaube Wildcard-Imports von Modulen, die all definieren.
allow-wildcard-with-all=no

#Veraltete Module, die nicht verwendet werden sollten, durch Kommas getrennt.
deprecated-modules=

#Erzeugen Sie eine Grafik (.gv oder ein beliebiges unterstütztes Bildformat) der externen
#Abhängigkeiten in die angegebene Datei (Bericht RP0402 darf nicht deaktiviert werden).
ext-import-graph=

#Erzeugen Sie eine Grafik (.gv oder ein beliebiges unterstütztes Bildformat) aller (d. H.
#internen und externen) Abhängigkeiten in die angegebene Datei (Bericht RP0402 darf nicht
#deaktiviert werden).
import-graph=

#Erzeugen Sie eine Grafik (.gv oder ein beliebiges unterstütztes Bildformat) der internen
#Abhängigkeiten in die angegebene Datei (Bericht RP0402 darf nicht deaktiviert werden).
int-import-graph=

#Erzwingen Sie die Importreihenfolge, um ein Modul als Teil der
#Standardkompatibilitätsbibliotheken anzuerkennen.
known-standard-library=

#Erzwingen Sie die Importreihenfolge, um ein Modul als Teil einer Bibliothek von Drittanbiet
##Anfang

# Minimum lines number of a similarity.
min-similarity-lines=4


[SPELLING]

# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4

# Spelling dictionary name. Available dictionaries: none. To make it work,
# install the 'python-enchant' package.
spelling-dict=

# List of comma separated words that should be considered directives if they
# appear at the beginning of a comment and should not be checked.
spelling-ignore-comment-directives=fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains the private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words=no


[STRING]

# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency=no

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps=no


[TYPECHECK]

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=

# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference=yes

# List of symbolic message names to ignore for Mixin members.
ignored-checks-for-mixins=no-member,
                          not-async-context-manager,
                          not-context-manager,
                          attribute-defined-outside-init

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local,argparse.Namespace

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices=1

# Regex pattern to define which classes are considered mixins.
mixin-class-rgx=.*[Mm]ixin

# List of decorators that change the signature of a decorated function.
signature-mutators=


[VARIABLES]

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of names allowed to shadow builtins
allowed-redefined-builtins=

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,
          _cb

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored.
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io


##Ende