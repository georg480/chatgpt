#[MASTER]
#encoding = utf-8

[MAIN]
#Dies deaktiviert die Prüfung der Moduldokumentation und der Funktion dokumentation, aber alle anderen Prüfungen werden
#weiterhin ausgeführt
disable = missing-function-docstring, missing-module-docstring, missing-class-docstring

#Analysieren von Import-Fallback-Blöcken. Dies kann verwendet werden, um sowohl Python-2- als auch
#Python-3-kompatiblen Code zu unterstützen, was bedeutet, dass der Block Code enthalten kann, der
#nur in einem oder einem anderen Interpreter vorhanden ist, was zu falsch positiven Ergebnissen bei
#der Analyse führen kann.
analyse-fallback-blocks = no

#Löschen von In-Memory-Caches nach Abschluss des Linting. Nützlich, wenn pylint im Server-Modus
#ausgeführt wird.
clear-cache-post-run = no

#Alle verfügbaren Erweiterungen laden und aktivieren. Verwenden Sie --list-extensions, um eine
#Liste aller verfügbaren Erweiterungen anzuzeigen.
#enable-all-extensions=

#Im Fehlermodus werden Nachrichten mit einer Kategorie außer ERROR oder FATAL unterdrückt, und
#standardmäßig werden keine Berichte erstellt. Der Fehlermodus ist mit der Deaktivierung
#bestimmter Fehler kompatibel.
#errors-only=

#Immer eine 0 (kein Fehler) Statuscode zurückgeben, auch wenn Lint-Fehler gefunden werden. Dies ist
# hauptsächlich in Continuous Integration-Skripten nützlich.
#exit-zero=

#Eine durch Komma getrennte Liste von Paket- oder Modulnamen, aus denen C-Erweiterungen geladen
#werden können. Erweiterungen werden in den aktiven Python-Interpreter geladen und können
#beliebigen Code ausführen.
extension-pkg-allow-list=

#Eine durch Komma getrennte Liste von Paket- oder Modulnamen, aus denen C-Erweiterungen geladen
#werden können. Erweiterungen werden in den aktiven Python-Interpreter geladen und können
#beliebigen Code ausführen. (Dies ist ein alternativer Name für extension-pkg-allow-list zur
#Abwärtskompatibilität.)
extension-pkg-whitelist=

#Gib einen Nicht-Null-Exit-Code zurück, wenn eine dieser Nachrichten/Kategorien erkannt wird, auch
#wenn der Wert über --fail-under liegt. Syntax wie enable. Angegebene Nachrichten sind aktiviert,
#während Kategorien bereits aktivierten Nachrichten überprüfen.
fail-on=

#Legen Sie einen Schwellenwert fest, unter dem das Programm bei einem Fehler beendet wird.
fail-under = 10

#Interpretieren Sie stdin als Python-Skript, dessen Dateiname als Argument "module_or_package"
#übergeben werden muss.
#from-stdin=

#Zu ignorierende Dateien oder Verzeichnisse. Sie sollten Base namen sein, keine Pfade.
ignore = CVS

#Fügen Sie reguläre Ausdrucksmuster hinzu, die Dateien oder Verzeichnisse ignorieren sollen. Der
#reguläre Ausdruck passt auf Pfade und kann im Posix- oder Windows-Format vorliegen. Da '\' das
#Verzeichnistrennzeichen auf Windows-Systemen darstellt, kann es nicht als Escape-Zeichen verwendet
# werden.
ignore-paths=

#Dateien oder Verzeichnisse, die den regulären Ausdrucksmustern entsprechen, werden ignoriert. Der
#reguläre Ausdruck passt auf Basenamen, nicht auf Pfade. Der Standardwert ignoriert
#Emacs-Dateisperren.
ignore-patterns=^.#

#Liste von Modulnamen, für die Member-Attribute nicht überprüft werden sollten (n
#Liste von Modulnamen, für die Mitgliedsattribute nicht überprüft werden sollten
#(nützlich für Module/Projekte, bei denen Namensräume zur Laufzeit manipuliert
#werden und somit vorhandene Mitgliedsattribute nicht durch statische Analyse
#abgeleitet werden können). Es unterstützt qualifizierte Modulnamen sowie Unix-Musterabgleich.

#ignorierte-Module =

#Python-Code zur Ausführung, normalerweise zur sys.path-Manipulation wie pygtk.require().
#init-hook=

#Verwenden Sie mehrere Prozesse, um Pylint zu beschleunigen. Wenn Sie 0 angeben, wird die Anzahl der verfügbaren Prozessoren automatisch erkannt und die Anzahl auf Windows begrenzt, um Hängen zu vermeiden.
jobs = 1

#Steuern Sie die Anzahl der potenziellen abgeleiteten Werte beim Ableiten eines einzelnen Objekts. Dies kann die Leistung bei der Verarbeitung großer Funktionen oder komplexer, verschachtelter Bedingungen verbessern.
limit-inference-results = 100

#Liste der zu ladenden Plugins (als durch Komma getrennte Werte von Python-Modulnamen), normalerweise zur Registrierung zusätzlicher Checker.
load-plugins =

#Pickle gesammelte Daten für spätere Vergleiche.
persistent = yes

#Mindest-Python-Version für Versionsabhängige Überprüfungen. Wird standardmäßig auf die zur Ausführung von Pylint verwendete Version festgelegt.
py-version = 3.11

#Entdecken Sie Python-Module und -Pakete im Dateisystem-Unterbaum.
recursive = no

#Wenn aktiviert, würde Pylint versuchen, häufige Fehlkonfigurationen zu erraten und benutzerfreundliche Hinweise anstelle von falsch positiven Fehlermeldungen auszugeben.
suggestion-mode = yes

#Erlauben Sie das Laden beliebiger C-Erweiterungen. Erweiterungen werden in den aktiven Python-Interpreter importiert und können beliebigen Code ausführen.
unsafe-load-any-extension = no

#Im verbose-Modus wird zusätzliche, nicht checker-bezogene Informationen angezeigt.
#verbose=

[BASIC]

#Namensstil, der den korrekten Argumentnamen entspricht.
argument-naming-style = snake_case

#Regulärer Ausdruck, der den korrekten Argumentnamen entspricht. Überschreibt argument-naming-style. Wenn leer gelassen, werden Argumentnamen mit dem festgelegten Namensstil überprüft.
#argument-rgx=

#Namensstil, der den korrekten Attributnamen entspricht.
attr-naming-style = snake_case

#Regulärer Ausdruck, der den korrekten Attributnamen entspricht. Überschreibt attr-naming-style. Wenn leer gelassen, werden Attributnamen mit dem festgelegten Namensstil überprüft.
#attr-rgx=

#Liste der schlechten Variablennamen, die immer abgelehnt werden sollten, durch Kommas getrennt.
bad-names=foo,bar,baz,toto,tutu,tata

#Reguläre Ausdrücke für schlechte Variablennamen, durch Kommas getrennt. Wenn Namen zu einem Regex passen,
#werden sie immer abgelehnt.
bad-names-rgxs=

#Naming-Style, der zu korrekten Klassenattributnamen passt.
class-attribute-naming-style=any

#Regulärer Ausdruck, der zu korrekten Klassenattributnamen passt. Überschreibt class-attribute-naming-style. Wenn leer gelassen,
#werden Klassenattributnamen mit dem eingestellten Naming-Style überprüft.
#class-attribute-rgx=

#Naming-Style, der zu korrekten Klassenkonstanten-Namen passt.
class-const-naming-style=UPPER_CASE

#Regulärer Ausdruck, der zu korrekten Klassenkonstanten-Namen passt.
#Überschreibt class-const-naming-style. Wenn leer gelassen,
#werden Klassenkonstantennamen mit dem eingestellten Naming-Style überprüft.
#class-const-rgx=

#Naming-Style, der zu korrekten Klassennamen passt.
class-naming-style=PascalCase

#Regulärer Ausdruck, der zu korrekten Klassennamen passt. Überschreibt class-naming-style. Wenn leer gelassen,
#werden Klassennamen mit dem eingestellten Naming-Style überprüft.
#class-rgx=

#Naming-Style, der zu korrekten Konstantennamen passt.
const-naming-style=UPPER_CASE

#Regulärer Ausdruck, der zu korrekten Konstantennamen passt. Überschreibt const-naming-style. Wenn leer gelassen,
#werden Konstantennamen mit dem eingestellten Naming-Style überprüft.
#const-rgx=

#Minimale Zeilenlänge für Funktionen/Klassen, die Docstrings benötigen. Kürzere sind ausgenommen.
docstring-min-length=-1

#Naming-Style, der zu korrekten Funktionsnamen passt.
function-naming-style=snake_case

#Regulärer Ausdruck, der zu korrekten Funktionsnamen passt. Überschreibt function-naming-style. Wenn leer gelassen,
#werden Funktionsnamen mit dem eingestellten Naming-Style überprüft.
#function-rgx=

#Gute Variablennamen, die immer akzeptiert werden sollten, durch Kommas getrennt.
good-names=i,j,k,ex,Run,_

#Reguläre Ausdrücke für gute Variablennamen, durch Kommas getrennt. Wenn Namen zu einem Regex passen,
#werden sie immer akzeptiert.
good-names-rgxs=

#Einen Hinweis für das korrekte Namensformat mit invalid-name einbeziehen.
include-naming-hint=no

#Naming-Style, der zu korrekten Inline-Iteratoren passt.
inlinevar-naming-style=any

#Regulärer Ausdruck, der zu korrekten Inline-Iteratoren passt. Überschreibt inlinevar-naming-style. Wenn leer gelassen


#inlinevar-rgx=
#Naming-Style, das den korrekten Methodennamen entspricht.
method-naming-style=snake_case

#Regulärer Ausdruck, der korrekte Methodennamen entspricht. Überschreibt die
#Methode-Namenskonvention. Wenn leer, werden Methodennamen mit der festgelegten
#Namenskonvention überprüft.
#method-rgx=

#Naming-Style, der den korrekten Modulnamen entspricht.
module-naming-style=snake_case

#Regulärer Ausdruck, der korrekte Modulnamen entspricht. Überschreibt die
#Modul-Namenskonvention. Wenn leer, werden Modulnamen mit der festgelegten
#Namenskonvention überprüft.
#module-rgx=

#Durch Doppelpunkt getrennte Namen, die jeweils den Namensstil des anderen bestimmen,
#wenn die Namens-Regexes mehrere Stile zulassen.
name-group=

#Regulärer Ausdruck, der nur zu Funktionen oder Klassennamen passen sollte,
#die keine Docstring erfordern.
no-docstring-rgx=^_

#Liste der Dekoratoren, die Eigenschaften erzeugen, z. B. abc.abstractproperty.
#Fügen Sie diese Liste hinzu, um andere Dekoratoren zu registrieren, die gültige Eigenschaften
#erzeugen. Diese Dekoratoren werden nur bei invalid-name berücksichtigt.
property-classes=abc.abstractproperty

#Regulärer Ausdruck, der korrekte Namen von Typvariablen entspricht. Wenn leer,
#werden Typvariablennamen mit der festgelegten Namenskonvention überprüft.
#typevar-rgx=

#Naming-Style, der den korrekten Variablennamen entspricht.
variable-naming-style=snake_case

#Regulärer Ausdruck, der korrekte Variablennamen entspricht. Überschreibt die
#Variablen-Namenskonvention. Wenn leer, werden Variablennamen mit der festgelegten
#Namenskonvention überprüft.
#variable-rgx=
#Liste gültiger Namen für das erste Argument in einer Metaklasse-Klassenmethode.
valid-metaclass-classmethod-first-arg=mcs

[DESIGN]

#Liste von regulären Ausdrücken von Klassenvorfahrensnamen, die beim Zählen von
#öffentlichen Methoden ignoriert werden sollen (siehe R0903)
exclude-too-few-public-methods=

#Liste von qualifizierten Klassennamen, die beim Zählen von Klasseneltern ignoriert werden sollen (siehe R0901)
ignored-parents=

#Maximale Anzahl von Argumenten für eine Funktion/Methode.
max-args=5

#Maximale Anzahl von Attributen für eine Klasse (siehe R0902).
max-attributes=7

#Maximale Anzahl von Booleschen Ausdrücken in einer if-Anweisung (siehe R0916).
max-bool-expr=5

#Maximale Anzahl von Zweigen für den Funktions-/Methodenrumpf.
max-branches=12

#Maximale Anzahl von Lokalvariablen für den Funktions-/Methodenrumpf.
max-locals=15

#Maximale Anzahl von Eltern für eine Klasse (siehe R0901).

#Maximale Anzahl öffentlicher Methoden für eine Klasse (siehe R0904).
max-public-methods=20

#Maximale Anzahl von Rückgaben / Yield für den Funktions- / Methodenkörper.
max-returns=6

#Maximale Anzahl von Anweisungen im Funktions- / Methodenkörper.
max-statements=50

#Minimale Anzahl öffentlicher Methoden für eine Klasse (siehe R0903).
min-public-methods=2

[AUSNAHMEN]

#Ausnahmen, die eine Warnung auslösen, wenn sie gefangen werden.
overgeneral-exceptions=builtins.BaseException,builtins.Exception

[FORMATIERUNG]

#Erwartetes Format des Zeilenendes, z.B. leer (beliebiges Zeilenende), LF oder CRLF.
expected-line-ending-format=

#Regulärer Ausdruck für eine Zeile, die länger als die Grenze sein darf.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

#Anzahl der erforderlichen Leerzeichen für die Einrückung innerhalb einer hängenden oder
#fortgesetzten Zeile.
indent-after-paren=4

#Zeichenfolge, die als Einheit für die Einrückung verwendet wird. Dies ist normalerweise " " (4
#Leerzeichen) oder "\t" (1 Tabulator).
indent-string='    '

#Maximale Anzahl von Zeichen in einer einzelnen Zeile.
max-line-length=100

#Maximale Anzahl von Zeilen in einem Modul.
max-module-lines=1000

#Erlaube den Körper einer Klasse auf derselben Zeile wie die Deklaration zu stehen, wenn der Körper
#nur eine Anweisung enthält.
single-line-class-stmt=no

#Erlaube den Körper eines If auf derselben Zeile wie der Test zu stehen, wenn es kein Else gibt.
single-line-if-stmt=no

[IMPORTS]

#Liste der Module, die auf jeder Ebene importiert werden können, nicht nur auf der obersten Ebene.
allow-any-import-level=

#Erlaube explizite Reexports durch Alias aus einem Paket init.
allow-reexport-from-package=no

#Erlaube Wildcard-Imports von Modulen, die all definieren.
allow-wildcard-with-all=no

#Veraltete Module, die nicht verwendet werden sollten, durch Kommas getrennt.
deprecated-modules=

#Erzeugen Sie eine Grafik (.gv oder ein beliebiges unterstütztes Bildformat) der externen
#Abhängigkeiten in die angegebene Datei (Bericht RP0402 darf nicht deaktiviert werden).
ext-import-graph=

#Erzeugen Sie eine Grafik (.gv oder ein beliebiges unterstütztes Bildformat) aller (d. H.
#internen und externen) Abhängigkeiten in die angegebene Datei (Bericht RP0402 darf nicht
#deaktiviert werden).
import-graph=

#Erzeugen Sie eine Grafik (.gv oder ein beliebiges unterstütztes Bildformat) der internen
#Abhängigkeiten in die angegebene Datei (Bericht RP0402 darf nicht deaktiviert werden).
int-import-graph=

#Erzwingen Sie die Importreihenfolge, um ein Modul als Teil der
#Standardkompatibilitätsbibliotheken anzuerkennen.
known-standard-library=

#Erzwingen Sie die Importreihenfolge, um ein Modul als Teil einer Bibliothek von Drittanbiet
#Erzwinge die Import-Reihenfolge, um ein Modul als Teil einer Bibliothek von Drittanbietern zu
#erkennen.
known-third-party=enchant

#Paare von Modulen und bevorzugten Modulen, durch Komma getrennt.
preferred-modules=

[LOGGING]

#Der Typ der Zeichenkettenformatierung, die von Logging-Methoden verwendet wird.
#old bedeutet die Verwendung von %
#Formatierung, new ist für die {} Formatierung.
logging-format-style=old

#Logging-Module, um zu überprüfen, ob die Zeichenkettenformatargumente im Logging
#Funktionsparameterformat sind.
logging-modules=logging

[MESSAGES CONTROL]

#Zeige nur Warnungen mit den aufgelisteten Vertrauensniveaus an. Leer lassen, um alle anzuzeigen.
confidence=HIGH,
           CONTROL_FLOW,
           INFERENCE,
           INFERENCE_FAILURE,
           UNDEFINED

#Deaktivieren Sie die Nachricht, den Bericht, die Kategorie oder den Prüfer mit den angegebenen IDs. Sie können entweder mehrere Identifikatoren durch Komma (,) angeben oder diese Option mehrmals angeben (nur auf der Befehlszeile, nicht in der Konfigurationsdatei, in der sie nur einmal erscheinen sollte). Sie können auch "--disable=all" verwenden, um zunächst alles zu deaktivieren und dann bestimmte Überprüfungen wieder zu aktivieren. Wenn Sie beispielsweise nur den Similarities-Prüfer ausführen möchten, können Sie "--disable=all --enable=similarities" verwenden. Wenn Sie nur den Klassenprüfer ausführen möchten, aber keine Warnstufenmeldungen angezeigt werden sollen, verwenden Sie "--disable=all --enable=classes
disable=raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-symbolic-message-instead

#Aktivieren Sie die Nachricht, den Bericht, die Kategorie oder den Prüfer mit den angegebenen IDs. Sie können
#entweder mehrere Identifier durch Komma (,) angeben oder diese Option mehrmals angeben (nur auf der Befehlszeile, nicht in der Konfigurationsdatei, in der sie nur einmal erscheinen sollte). Siehe auch die "--disable" Option für Beispiele.
enable=c-extension-no-member

[METHOD_ARGS]

#Liste der qualifizierten Namen (d. h. Bibliotheksmethode), die einen Timeout-Parameter erfordern,
#z. B. 'requests.api.get,requests.api.post'
timeout-methods=requests.api.delete,requests.api.get,requests.api.head,requests.api.options,requests.api.patch,requests.api.post,requests.api.put,requests.api.request

#Mindestzeilenanzahl einer Ähnlichkeit.
[MISCELLANEOUS]

#Liste von Notiz-Tags, die berücksichtigt werden sollen, getrennt durch Komma.
notes=FIXME,
    XXX,
    TODO

#Regulärer Ausdruck der Notiz-Tags, die berücksichtigt werden sollen.
notes-rgx=

[REFACTORING]

#Maximale Anzahl von verschachtelten Blöcken für die Funktion / Methode.
max-nested-blocks=5

#Vollständiger Name von Funktionen, die niemals zurückgeben. Wenn bei der Prüfung auf inkonsistente Rückgabeanweisungen eine Funktion aufgerufen wird, die niemals zurückkehrt, wird sie als explizite Rückgabeanweisung betrachtet und es wird keine Meldung ausgegeben.
never-returning-functions=sys.exit,argparse.parse_error

[REPORTS]

#Python-Ausdruck, der eine Punktzahl von höchstens 10 zurückgeben sollte. Sie haben Zugriff auf die Variablen 'fatal', 'error', 'warning', 'refactor', 'convention' und 'info', die die Anzahl der Meldungen in jeder Kategorie enthalten, sowie 'statement', das die Gesamtzahl der analysierten Anweisungen ist. Diese Punktzahl wird von dem globalen Bewertungsbericht (RP0004) verwendet.
evaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))

#Vorlage zur Anzeige von Nachrichten. Dies ist eine Python-Neustil-Formatzeichenfolge, die zur Formatierung von Nachrichteninformationen verwendet wird. Siehe Dokumentation für alle Details.
msg-template=

#Legt das Ausgabeformat fest. Verfügbare Formate sind Text, Parsbar, Colorized, JSON und MSVS (Visual Studio). Sie können auch eine Reporter-Klasse angeben, z. B. mypackage.mymodule.MyReporterClass.
#output-format=

#Gibt an, ob ein vollständiger Bericht oder nur die Meldungen angezeigt werden sollen.
reports=no

#Aktiviert die Bewertungsnote.
score=yes

[SIMILARITIES]

#Kommentare werden aus der Ähnlichkeitsberechnung entfernt.
ignore-comments=yes

#Docstrings werden aus der Ähnlichkeitsberechnung entfernt.
ignore-docstrings=yes

#Importe werden aus der Ähnlichkeitsberechnung entfernt.
ignore-imports=yes

#Signaturen werden aus der Ähnlichkeitsberechnung entfernt.
ignore-signatures=yes

#Mindestzeilenanzahl einer Ähnlichkeit.
min-similarity-lines=4

#Liste von symbolischen Nachrichtennamen, die für Mixin-Mitglieder ignoriert werden sollen.
ignored-checks-for-mixins=no-member,
    not-async-context-manager,
    not-context-manager,
    attribute-defined-outside-init

#Liste von Klassennamen, für die Mitgliedsattribute nicht überprüft werden sollten (nützlich
#für Klassen mit dynamisch gesetzten Attributen). Dies unterstützt die Verwendung von
#qualifizierten Namen.
ignored-classes=optparse.Values,thread._local,_thread._local,argparse.Namespace

#Zeigt einen Hinweis mit möglichen Namen an, wenn ein Membername nicht gefunden wurde. Der Aspekt
#des Auffindens des Hinweises basiert auf der Editierdistanz.
missing-member-hint=yes

#Die minimale Editierdistanz, die ein Name haben sollte, um als ähnliches Match für einen fehlenden Membernamen betrachtet zu werden.
missing-member-hint-distance=1

#Die Gesamtzahl ähnlicher Namen, die in Betracht gezogen werden sollten, wenn ein Hinweis für ein fehlendes Mitglied angezeigt wird.
missing-member-max-choices=1

#Regex-Muster, um zu definieren, welche Klassen als Mixins betrachtet werden.
mixin-class-rgx=.*[Mm]ixin

#Liste von Dekoratoren, die die Signatur einer dekorierten Funktion ändern.
signature-mutators=

[VARIABLES]

#Liste von zusätzlichen Namen, die in builtins definiert werden sollen. Denken Sie daran, dass
#Sie neue builtins möglichst vermeiden sollten.
additional-builtins=

#Gibt an, ob unbenutzte globale Variablen als Verstoß behandelt werden sollen.
allow-global-unused-variables=yes

#Liste von Namen, die gebaut werden dürfen.
allowed-redefined-builtins=

#Liste von Zeichenfolgen, mit denen eine Rückruffunktion anhand des Namens identifiziert werden kann. Ein Rückrufname muss mit einer dieser Zeichenfolgen beginnen oder enden.
callbacks=cb_,
    _cb

#Ein regulärer Ausdruck, der den Namen von Dummy-Variablen (d. H. Nicht verwendet werden soll) entspricht.
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

#Argumentnamen, die diesem Ausdruck entsprechen, werden ignoriert.
ignored-argument-names=.*|^ignored|^unused_

#Gibt an, ob wir in init -Dateien auf nicht verwendete Importe prüfen sollten.
init-import=no

#Liste von qualifizierten Modulnamen, die Objekte enthalten können,
# die eingebaute Funktionen neu definieren können.

